{"ast":null,"code":"import { first, switchMap, timer } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../login.service\";\nimport * as i2 from \"../general-api.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../histogram-diagram/histogram-diagram.component\";\nfunction HistogramComponent_div_25_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-histogram-diagram\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const bp_r3 = ctx.ngIf;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"frequencyNumber\", ctx_r2.frequencyNumber)(\"bloodPressureRange\", ctx_r2.bloodPressureRangeRaw)(\"frequency\", ctx_r2.calRawBucketValues(bp_r3))(\"interval\", 10);\n  }\n}\nfunction HistogramComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, HistogramComponent_div_25_div_1_Template, 2, 4, \"div\", 13);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(2, 1, ctx_r0.bloodPressure$));\n  }\n}\nfunction HistogramComponent_div_26_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-histogram-diagram\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const bp_r5 = ctx.ngIf;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"frequencyNumber\", ctx_r4.frequencyNumber)(\"bloodPressureRange\", ctx_r4.bloodPressureRangeLogarithmic)(\"frequency\", ctx_r4.calLogBucketValues(bp_r5))(\"interval\", 0.2);\n  }\n}\nfunction HistogramComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, HistogramComponent_div_26_div_1_Template, 2, 4, \"div\", 13);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(2, 1, ctx_r1.bloodPressure$));\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    active: a0\n  };\n};\nexport class HistogramComponent {\n  constructor(loginService, api) {\n    this.loginService = loginService;\n    this.api = api;\n    this.isRawDisplay = true;\n    this.frequencyNumber = [20, 40, 60, 80, 100].reverse();\n    this.pollInterval = 5000;\n  }\n  ngOnInit() {\n    this.bloodPressureRangeRaw = this.generateRawRange();\n    this.bloodPressureRangeLogarithmic = this.generateLogarithmicRange();\n    //this.token = this.loginService.LoginToken;\n    this.token = \"iasgosdjaoifgo\";\n    this.bloodPressure$ = this.api.getUserBloodPressure(this.token).pipe(first()); //call for the first time\n    this.bloodPressure$ = timer(0, this.pollInterval).pipe(switchMap(() => this.api.getUserBloodPressure(this.token).pipe(first())));\n  }\n  switchPanel(isRaw) {\n    this.isRawDisplay = isRaw;\n  }\n  generateRawRange() {\n    let result = [];\n    let start = 80;\n    while (start <= 200) {\n      result.push(start);\n      start += 10;\n    }\n    return result;\n  }\n  generateLogarithmicRange() {\n    let result = [];\n    let start = 4.0;\n    while (start <= 5.4) {\n      result.push(start);\n      start += 0.2;\n      start = parseFloat(start.toFixed(1));\n    }\n    return result;\n  }\n  calRawBucketValues(data) {\n    let result = new Array(11);\n    result.fill(0);\n    for (let each of data[0].bloodPressure) {\n      let index = this.calculateRawInterval(each);\n      result[index] += 1;\n    }\n    return result;\n  }\n  calLogBucketValues(data) {\n    let result = new Array(8);\n    result.fill(0);\n    for (let each of data[0].bloodPressure) {\n      let index = this.calculateLogInterval(Math.log(each));\n      result[index] += 1;\n    }\n    return result;\n  }\n  calculateRawInterval(num) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRangeRaw.length - 1; i++) {\n      if (num >= this.bloodPressureRangeRaw[i] && num < this.bloodPressureRangeRaw[i + 1]) {\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n  calculateLogInterval(num) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRangeLogarithmic.length - 1; i++) {\n      if (num >= this.bloodPressureRangeLogarithmic[i] && num < this.bloodPressureRangeLogarithmic[i + 1]) {\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n}\nHistogramComponent.ɵfac = function HistogramComponent_Factory(t) {\n  return new (t || HistogramComponent)(i0.ɵɵdirectiveInject(i1.LoginService), i0.ɵɵdirectiveInject(i2.GeneralApiService));\n};\nHistogramComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HistogramComponent,\n  selectors: [[\"app-hostogram\"]],\n  decls: 27,\n  vars: 9,\n  consts: [[1, \"main-histo\"], [1, \"top-menu\"], [1, \"top-section\"], [1, \"card\", \"user-profile\"], [1, \"card\", \"control-panel\"], [\")]\", \"\", 1, \"form-control\", 3, \"[(ngModel\", \"[(ngModelChange\"], [1, \"buttom-section\"], [1, \"card\"], [1, \"nav\", \"nav-tabs\"], [1, \"nav-item\"], [\"aria-current\", \"page\", \"href\", \"javascript:void(null);\", 1, \"nav-link\", 3, \"ngClass\", \"click\"], [\"href\", \"javascript:void(null);\", 1, \"nav-link\", 3, \"ngClass\", \"click\"], [1, \"card-body\", \"diagram-body\"], [4, \"ngIf\"], [3, \"frequencyNumber\", \"bloodPressureRange\", \"frequency\", \"interval\"]],\n  template: function HistogramComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"button\");\n      i0.ɵɵtext(3, \"Logout\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3)(6, \"div\")(7, \"h2\");\n      i0.ɵɵtext(8, \"My blood Pressures\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"p\");\n      i0.ɵɵtext(10, \"Age\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(11, \"div\", 4)(12, \"input\", 5);\n      i0.ɵɵlistener(\"[(ngModelChange\", function HistogramComponent_Template_input___ngModelChange_12_listener($event) {\n        return ctx.binding = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(13, \"div\", 6)(14, \"div\", 7)(15, \"ul\", 8)(16, \"li\", 9)(17, \"a\", 10);\n      i0.ɵɵlistener(\"click\", function HistogramComponent_Template_a_click_17_listener() {\n        return ctx.switchPanel(true);\n      });\n      i0.ɵɵtext(18, \"Raw Data\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"li\", 9)(20, \"a\", 11);\n      i0.ɵɵlistener(\"click\", function HistogramComponent_Template_a_click_20_listener() {\n        return ctx.switchPanel(false);\n      });\n      i0.ɵɵtext(21, \"Logarithmic Data\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(22, \"div\", 12)(23, \"h1\");\n      i0.ɵɵtext(24, \"My Blood pressure histogram\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(25, HistogramComponent_div_25_Template, 3, 3, \"div\", 13);\n      i0.ɵɵtemplate(26, HistogramComponent_div_26_Template, 3, 3, \"div\", 13);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"[(ngModel\", ctx.binding);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(5, _c0, ctx.isRawDisplay));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(7, _c0, !ctx.isRawDisplay));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.isRawDisplay);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isRawDisplay);\n    }\n  },\n  dependencies: [i3.NgClass, i3.NgIf, i4.HistogramDiagramComponent, i3.AsyncPipe],\n  styles: [\".main-histo[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  margin-left: 7vw;\\n  margin-right: 7vw;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-section[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  height: 30vh;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-section[_ngcontent-%COMP%]   .user-profile[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-section[_ngcontent-%COMP%]   .control-panel[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n.main-histo[_ngcontent-%COMP%]   .buttom-section[_ngcontent-%COMP%] {\\n  height: 48vh;\\n}\\n.main-histo[_ngcontent-%COMP%]   .buttom-section[_ngcontent-%COMP%]   .diagram-body[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvaG9zdG9ncmFtL2hpc3RvZ3JhbS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGdCQUFBO0VBQ0EsaUJBQUE7QUFDRjtBQUtFO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtBQUhKO0FBS0k7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7QUFITjtBQU1JO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0FBSk47QUFRRTtFQUNFLFlBQUE7QUFOSjtBQVFJO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsdUJBQUE7QUFOTiIsInNvdXJjZXNDb250ZW50IjpbIi5tYWluLWhpc3Rve1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBtYXJnaW4tbGVmdDogN3Z3O1xyXG4gIG1hcmdpbi1yaWdodDogN3Z3O1xyXG5cclxuICAudG9wLW1lbnV7XHJcblxyXG4gIH1cclxuXHJcbiAgLnRvcC1zZWN0aW9ue1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICBoZWlnaHQ6IDMwdmg7XHJcblxyXG4gICAgLnVzZXItcHJvZmlsZXtcclxuICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIH1cclxuXHJcbiAgICAuY29udHJvbC1wYW5lbHtcclxuICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC5idXR0b20tc2VjdGlvbntcclxuICAgIGhlaWdodDogNDh2aDtcclxuXHJcbiAgICAuZGlhZ3JhbS1ib2R5e1xyXG4gICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["first","switchMap","timer","i0","HistogramComponent","constructor","loginService","api","reverse","ngOnInit","bloodPressureRangeRaw","generateRawRange","bloodPressureRangeLogarithmic","generateLogarithmicRange","token","bloodPressure$","getUserBloodPressure","pipe","pollInterval","switchPanel","isRaw","isRawDisplay","result","start","push","parseFloat","toFixed","calRawBucketValues","data","Array","fill","each","bloodPressure","index","calculateRawInterval","calLogBucketValues","calculateLogInterval","Math","log","num","i","length","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\practise\\ClinicalDataApp\\my-clinical-data-app\\src\\app\\hostogram\\histogram.component.ts","D:\\practise\\ClinicalDataApp\\my-clinical-data-app\\src\\app\\hostogram\\histogram.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { LoginService } from '../login.service';\nimport { GeneralApiService } from '../general-api.service';\nimport { Observable, first, switchMap, timer } from 'rxjs';\nimport { UserBloodPressure } from '../model/user-blood-pressure';\n\n@Component({\n  selector: 'app-hostogram',\n  templateUrl: './histogram.component.html',\n  styleUrls: ['./histogram.component.scss'],\n})\nexport class HistogramComponent implements OnInit{\n  token!: string;\n  isRawDisplay = true;\n  bloodPressureRangeRaw!: number[];\n  bloodPressureRangeLogarithmic!: number[];\n  frequencyNumber = [20,40,60,80,100].reverse();\n  pollInterval = 5000;\n  bloodPressure$!: Observable<UserBloodPressure>;\n\n  constructor(\n    private loginService: LoginService,\n    private api: GeneralApiService\n  ) {}\n\n  ngOnInit(): void {\n    this.bloodPressureRangeRaw = this.generateRawRange();\n    this.bloodPressureRangeLogarithmic = this.generateLogarithmicRange();\n\n    //this.token = this.loginService.LoginToken;\n    this.token = \"iasgosdjaoifgo\";\n\n    this.bloodPressure$ = this.api.getUserBloodPressure(this.token).pipe(first());//call for the first time\n\n    this.bloodPressure$ = timer(0, this.pollInterval).pipe(\n      switchMap(() =>\n        this.api.getUserBloodPressure(this.token).pipe(first())\n      )\n    )\n  }\n\n  switchPanel(isRaw: boolean){\n    this.isRawDisplay = isRaw;\n  }\n\n  generateRawRange():number[]{\n    let result = [];\n    let start = 80;\n    while(start <= 200){\n      result.push(start);\n      start += 10;\n    }\n    return result;\n  }\n\n  generateLogarithmicRange():number[]{\n    let result = [];\n    let start = 4.0;\n    while(start <= 5.4){\n      result.push(start);\n      start += 0.2;\n      start = parseFloat(start.toFixed(1));\n    }\n    return result;\n  }\n\n  calRawBucketValues(data: any): number[]{\n    let result = new Array(11);\n    result.fill(0)\n    for(let each of data[0].bloodPressure){\n      let index = this.calculateRawInterval(each);\n      result[index] += 1;\n    }\n    return result;\n  }\n\n  calLogBucketValues(data: any): number[]{\n    let result = new Array(8);\n    result.fill(0)\n    for(let each of data[0].bloodPressure){\n      let index = this.calculateLogInterval(Math.log(each));\n      result[index] += 1;\n    }\n    return result;\n  }\n\n  calculateRawInterval(num: number){\n    let index = 0;\n    for(let i = 0; i < this.bloodPressureRangeRaw.length - 1;i ++){\n      if(num >= this.bloodPressureRangeRaw[i] && num < this.bloodPressureRangeRaw[i + 1]){\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n\n  calculateLogInterval(num: number){\n    let index = 0;\n    for(let i = 0; i < this.bloodPressureRangeLogarithmic.length - 1;i ++){\n      if(num >= this.bloodPressureRangeLogarithmic[i] && num < this.bloodPressureRangeLogarithmic[i + 1]){\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n}\n","<div class=\"main-histo\">\n  <div class=\"top-menu\">\n    <button>Logout</button>\n  </div>\n  <div class=\"top-section\">\n    <div class=\"card user-profile\">\n      <!-- <img /> -->\n      <div>\n        <h2>My blood Pressures</h2>\n        <p>Age</p>\n      </div>\n    </div>\n    <div class=\"card control-panel\">\n      <input class=\"form-control\" [([(ngModel)]=\"binding\")]>\n    </div>\n  </div>\n  <div class=\"buttom-section\">\n    <div class=\"card\">\n      <ul class=\"nav nav-tabs\">\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            [ngClass]=\"{ active: isRawDisplay }\"\n            aria-current=\"page\"\n            href=\"javascript:void(null);\"\n            (click)=\"switchPanel(true)\"\n            >Raw Data</a\n          >\n        </li>\n        <li class=\"nav-item\">\n          <a\n            class=\"nav-link\"\n            [ngClass]=\"{ active: !isRawDisplay }\"\n            href=\"javascript:void(null);\"\n            (click)=\"switchPanel(false)\"\n            >Logarithmic Data</a\n          >\n        </li>\n      </ul>\n      <div class=\"card-body diagram-body\">\n        <h1>My Blood pressure histogram</h1>\n        <div *ngIf=\"isRawDisplay\">\n          <div *ngIf=\"bloodPressure$ | async as bp\">\n            <app-histogram-diagram\n              [frequencyNumber]=\"frequencyNumber\"\n              [bloodPressureRange]=\"bloodPressureRangeRaw\"\n              [frequency]=\"calRawBucketValues(bp)\"\n              [interval]=\"10\"\n            ></app-histogram-diagram>\n          </div>\n        </div>\n        <div *ngIf=\"!isRawDisplay\">\n          <div *ngIf=\"bloodPressure$ | async as bp\">\n            <app-histogram-diagram\n              [frequencyNumber]=\"frequencyNumber\"\n              [bloodPressureRange]=\"bloodPressureRangeLogarithmic\"\n              [frequency]=\"calLogBucketValues(bp)\"\n              [interval]=\"0.2\"\n            ></app-histogram-diagram>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}