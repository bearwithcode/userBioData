{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ClinicalDatabaseService {\n  constructor() {\n    this.userData = [{\n      id: 1,\n      email: 'victor@gmail.com',\n      password: '123b',\n      token: 'iasgosdjaoifgo'\n    }, {\n      id: 2,\n      email: 'tove@gmail.com',\n      password: '345a',\n      token: 'fgdfgdfg'\n    }];\n  }\n  createDb() {\n    const users = this.userData;\n    const userBloodPressureData = this.generateUserBloodPressure();\n    return {\n      users,\n      userBloodPressureData\n    };\n  }\n  generateUserBloodPressure() {\n    return this.userData.map(each => {\n      let result = {\n        id: null,\n        token: each.token,\n        bloodPressure: []\n      };\n      let randomPressure = [];\n      for (let i = 0; i < 50; i++) {\n        randomPressure.push(Math.floor(Math.random() * 180) + 80);\n      }\n      result.bloodPressure = randomPressure;\n      return result;\n    });\n  }\n}\nClinicalDatabaseService.ɵfac = function ClinicalDatabaseService_Factory(t) {\n  return new (t || ClinicalDatabaseService)();\n};\nClinicalDatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClinicalDatabaseService,\n  factory: ClinicalDatabaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAQA,OAAM,MAAOA,uBAAuB;EAHpCC;IAIU,aAAQ,GAAW,CACzB;MACEC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,kBAAkB;MACzBC,QAAQ,EAAE,MAAM;MAChBC,KAAK,EAAE;KACR,EACD;MAAEH,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,gBAAgB;MAAEC,QAAQ,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAU,CAAE,CACxE;;EAEDC,QAAQ;IACN,MAAMC,KAAK,GAAW,IAAI,CAACC,QAAQ;IACnC,MAAMC,qBAAqB,GACzB,IAAI,CAACC,yBAAyB,EAAE;IAElC,OAAO;MAAEH,KAAK;MAAEE;IAAqB,CAAE;EACzC;EAEAC,yBAAyB;IACvB,OAAO,IAAI,CAACF,QAAQ,CAACG,GAAG,CAAEC,IAAI,IAAI;MAChC,IAAIC,MAAM,GAAsB;QAC9BX,EAAE,EAAE,IAAI;QACRG,KAAK,EAAEO,IAAI,CAACP,KAAK;QACjBS,aAAa,EAAE;OAChB;MACD,IAAIC,cAAc,GAAG,EAAE;MACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;QAC3BD,cAAc,CAACE,IAAI,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;;MAE3DP,MAAM,CAACC,aAAa,GAAGC,cAAc;MACrC,OAAOF,MAAM;IACf,CAAC,CAAC;EACJ;;AAjCWb,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAqB,SAAvBrB,uBAAuB;EAAAsB,YAFtB;AAAM","names":["ClinicalDatabaseService","constructor","id","email","password","token","createDb","users","userData","userBloodPressureData","generateUserBloodPressure","map","each","result","bloodPressure","randomPressure","i","push","Math","floor","random","factory","providedIn"],"sourceRoot":"","sources":["D:\\practise\\ClinicalDataApp\\my-clinical-data-app\\src\\app\\clinical-database.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { User } from './model/user';\nimport { UserBloodPressure } from './model/user-blood-pressure';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClinicalDatabaseService implements InMemoryDbService {\n  private userData: User[] = [\n    {\n      id: 1,\n      email: 'victor@gmail.com',\n      password: '123b',\n      token: 'iasgosdjaoifgo',\n    },\n    { id: 2, email: 'tove@gmail.com', password: '345a', token: 'fgdfgdfg' },\n  ];\n\n  createDb() {\n    const users: User[] = this.userData;\n    const userBloodPressureData: UserBloodPressure[] =\n      this.generateUserBloodPressure();\n\n    return { users, userBloodPressureData };\n  }\n\n  generateUserBloodPressure(): UserBloodPressure[] {\n    return this.userData.map((each) => {\n      let result: UserBloodPressure = {\n        id: null,\n        token: each.token,\n        bloodPressure: [],\n      };\n      let randomPressure = [];\n      for (let i = 0; i < 50; i++) {\n        randomPressure.push(Math.floor(Math.random() * 180) + 80);\n      }\n      result.bloodPressure = randomPressure;\n      return result;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}