{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { BehaviorSubject, first, map, switchMap, timer } from 'rxjs';\nlet HistogramComponent = class HistogramComponent {\n  constructor(loginService, api) {\n    this.loginService = loginService;\n    this.api = api;\n    this.isRawDisplay = true;\n    this.frequencyNumber = [20, 40, 60, 80, 100].reverse();\n    this.pollInterval = 5;\n    this.minValueSub$ = new BehaviorSubject(80);\n    this.maxValueSub$ = new BehaviorSubject(180);\n    this.pollIntervalSub$ = new BehaviorSubject(5);\n  }\n  ngOnInit() {\n    this.bloodPressureRangeRaw = this.generateRawRange();\n    this.bloodPressureRangeLogarithmic = this.generateLogarithmicRange();\n    //this.token = this.loginService.LoginToken;\n    this.token = \"iasgosdjaoifgo\";\n    this.bloodPressure$ = this.pollIntervalSub$.pipe(switchMap(val => timer(0, val * 1000).pipe(switchMap(() => this.api.getUserBloodPressure(this.token).pipe(first())), map(data => data[0].bloodPressure))));\n  }\n  switchPanel(isRaw) {\n    this.isRawDisplay = isRaw;\n  }\n  generateRawRange() {\n    let result = [];\n    let start = 80;\n    while (start <= 200) {\n      result.push(start);\n      start += 10;\n    }\n    return result;\n  }\n  generateLogarithmicRange() {\n    let result = [];\n    let start = 4.0;\n    while (start <= 5.4) {\n      result.push(start);\n      start += 0.2;\n      start = parseFloat(start.toFixed(1));\n    }\n    return result;\n  }\n  calRawBucketValues(data) {\n    let result = new Array(11);\n    result.fill(0);\n    for (let each of data) {\n      let index = this.calculateRawInterval(each);\n      result[index] += 1;\n    }\n    return result;\n  }\n  calLogBucketValues(data) {\n    let result = new Array(8);\n    result.fill(0);\n    for (let each of data) {\n      let index = this.calculateLogInterval(Math.log(each));\n      result[index] += 1;\n    }\n    return result;\n  }\n  calculateRawInterval(num) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRangeRaw.length - 1; i++) {\n      if (num >= this.bloodPressureRangeRaw[i] && num < this.bloodPressureRangeRaw[i + 1]) {\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n  calculateLogInterval(num) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRangeLogarithmic.length - 1; i++) {\n      if (num >= this.bloodPressureRangeLogarithmic[i] && num < this.bloodPressureRangeLogarithmic[i + 1]) {\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n  pollIntervalChanged() {\n    this.pollIntervalSub$.next(this.pollInterval);\n  }\n};\nHistogramComponent = __decorate([Component({\n  selector: 'app-hostogram',\n  templateUrl: './histogram.component.html',\n  styleUrls: ['./histogram.component.scss']\n})], HistogramComponent);\nexport { HistogramComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAASC,eAAe,EAAyDC,KAAK,EAAEC,GAAG,EAAEC,SAAS,EAAEC,KAAK,QAAQ,MAAM;AAQpH,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAa7BC,YACUC,YAA0B,EAC1BC,GAAsB;IADtB,iBAAY,GAAZD,YAAY;IACZ,QAAG,GAAHC,GAAG;IAbb,iBAAY,GAAG,IAAI;IAGnB,oBAAe,GAAG,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,CAAC,CAACC,OAAO,EAAE;IAC7C,iBAAY,GAAG,CAAC;IAGR,iBAAY,GAAG,IAAIT,eAAe,CAAS,EAAE,CAAC;IAC9C,iBAAY,GAAE,IAAIA,eAAe,CAAS,GAAG,CAAC;IAC9C,qBAAgB,GAAG,IAAIA,eAAe,CAAS,CAAC,CAAC;EAKtD;EAEHU,QAAQ;IACN,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACC,gBAAgB,EAAE;IACpD,IAAI,CAACC,6BAA6B,GAAG,IAAI,CAACC,wBAAwB,EAAE;IAEpE;IACA,IAAI,CAACC,KAAK,GAAG,gBAAgB;IAE7B,IAAI,CAACC,cAAc,GAAG,IAAI,CAACC,gBAAgB,CAACC,IAAI,CAC9Cf,SAAS,CAACgB,GAAG,IAAIf,KAAK,CAAC,CAAC,EAAEe,GAAG,GAAG,IAAI,CAAC,CAACD,IAAI,CACxCf,SAAS,CAAC,MACR,IAAI,CAACK,GAAG,CAACY,oBAAoB,CAAC,IAAI,CAACL,KAAK,CAAC,CAACG,IAAI,CAACjB,KAAK,EAAE,CAAC,CACxD,EACDC,GAAG,CAACmB,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,CAACC,aAAa,CAAC,CACnC,CAAC,CACH;EACH;EAEAC,WAAW,CAACC,KAAc;IACxB,IAAI,CAACC,YAAY,GAAGD,KAAK;EAC3B;EAEAZ,gBAAgB;IACd,IAAIc,MAAM,GAAG,EAAE;IACf,IAAIC,KAAK,GAAG,EAAE;IACd,OAAMA,KAAK,IAAI,GAAG,EAAC;MACjBD,MAAM,CAACE,IAAI,CAACD,KAAK,CAAC;MAClBA,KAAK,IAAI,EAAE;;IAEb,OAAOD,MAAM;EACf;EAEAZ,wBAAwB;IACtB,IAAIY,MAAM,GAAG,EAAE;IACf,IAAIC,KAAK,GAAG,GAAG;IACf,OAAMA,KAAK,IAAI,GAAG,EAAC;MACjBD,MAAM,CAACE,IAAI,CAACD,KAAK,CAAC;MAClBA,KAAK,IAAI,GAAG;MACZA,KAAK,GAAGE,UAAU,CAACF,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC,CAAC;;IAEtC,OAAOJ,MAAM;EACf;EAEAK,kBAAkB,CAACV,IAAc;IAC/B,IAAIK,MAAM,GAAG,IAAIM,KAAK,CAAC,EAAE,CAAC;IAC1BN,MAAM,CAACO,IAAI,CAAC,CAAC,CAAC;IACd,KAAI,IAAIC,IAAI,IAAIb,IAAI,EAAC;MACnB,IAAIc,KAAK,GAAG,IAAI,CAACC,oBAAoB,CAACF,IAAI,CAAC;MAC3CR,MAAM,CAACS,KAAK,CAAC,IAAI,CAAC;;IAEpB,OAAOT,MAAM;EACf;EAEAW,kBAAkB,CAAChB,IAAc;IAC/B,IAAIK,MAAM,GAAG,IAAIM,KAAK,CAAC,CAAC,CAAC;IACzBN,MAAM,CAACO,IAAI,CAAC,CAAC,CAAC;IACd,KAAI,IAAIC,IAAI,IAAIb,IAAI,EAAC;MACnB,IAAIc,KAAK,GAAG,IAAI,CAACG,oBAAoB,CAACC,IAAI,CAACC,GAAG,CAACN,IAAI,CAAC,CAAC;MACrDR,MAAM,CAACS,KAAK,CAAC,IAAI,CAAC;;IAEpB,OAAOT,MAAM;EACf;EAEAU,oBAAoB,CAACK,GAAW;IAC9B,IAAIN,KAAK,GAAG,CAAC;IACb,KAAI,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC/B,qBAAqB,CAACgC,MAAM,GAAG,CAAC,EAACD,CAAC,EAAG,EAAC;MAC5D,IAAGD,GAAG,IAAI,IAAI,CAAC9B,qBAAqB,CAAC+B,CAAC,CAAC,IAAID,GAAG,GAAG,IAAI,CAAC9B,qBAAqB,CAAC+B,CAAC,GAAG,CAAC,CAAC,EAAC;QACjFP,KAAK,GAAGO,CAAC,GAAG,CAAC;;;IAGjB,OAAOP,KAAK;EACd;EAEAG,oBAAoB,CAACG,GAAW;IAC9B,IAAIN,KAAK,GAAG,CAAC;IACb,KAAI,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC7B,6BAA6B,CAAC8B,MAAM,GAAG,CAAC,EAACD,CAAC,EAAG,EAAC;MACpE,IAAGD,GAAG,IAAI,IAAI,CAAC5B,6BAA6B,CAAC6B,CAAC,CAAC,IAAID,GAAG,GAAG,IAAI,CAAC5B,6BAA6B,CAAC6B,CAAC,GAAG,CAAC,CAAC,EAAC;QACjGP,KAAK,GAAGO,CAAC,GAAG,CAAC;;;IAGjB,OAAOP,KAAK;EACd;EAEAS,mBAAmB;IACjB,IAAI,CAAC3B,gBAAgB,CAAC4B,IAAI,CAAC,IAAI,CAACC,YAAY,CAAC;EAC/C;CACD;AAvGYzC,kBAAkB,eAL9BN,SAAS,CAAC;EACTgD,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACW5C,kBAAkB,CAuG9B;SAvGYA,kBAAkB","names":["Component","BehaviorSubject","first","map","switchMap","timer","HistogramComponent","constructor","loginService","api","reverse","ngOnInit","bloodPressureRangeRaw","generateRawRange","bloodPressureRangeLogarithmic","generateLogarithmicRange","token","bloodPressure$","pollIntervalSub$","pipe","val","getUserBloodPressure","data","bloodPressure","switchPanel","isRaw","isRawDisplay","result","start","push","parseFloat","toFixed","calRawBucketValues","Array","fill","each","index","calculateRawInterval","calLogBucketValues","calculateLogInterval","Math","log","num","i","length","pollIntervalChanged","next","pollInterval","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\practise\\ClinicalDataApp\\my-clinical-data-app\\src\\app\\hostogram\\histogram.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { LoginService } from '../login.service';\nimport { GeneralApiService } from '../general-api.service';\nimport { BehaviorSubject, Observable, Subject, combineLatest, combineLatestWith, first, map, switchMap, timer } from 'rxjs';\nimport { UserBloodPressure } from '../model/user-blood-pressure';\n\n@Component({\n  selector: 'app-hostogram',\n  templateUrl: './histogram.component.html',\n  styleUrls: ['./histogram.component.scss'],\n})\nexport class HistogramComponent implements OnInit{\n  token!: string;\n  isRawDisplay = true;\n  bloodPressureRangeRaw!: number[];\n  bloodPressureRangeLogarithmic!: number[];\n  frequencyNumber = [20,40,60,80,100].reverse();\n  pollInterval = 5;\n  bloodPressure$!: Observable<number[]>;\n\n  private minValueSub$ = new BehaviorSubject<number>(80);\n  private maxValueSub$= new BehaviorSubject<number>(180);\n  private pollIntervalSub$ = new BehaviorSubject<number>(5);\n\n  constructor(\n    private loginService: LoginService,\n    private api: GeneralApiService\n  ) {}\n\n  ngOnInit(): void {\n    this.bloodPressureRangeRaw = this.generateRawRange();\n    this.bloodPressureRangeLogarithmic = this.generateLogarithmicRange();\n\n    //this.token = this.loginService.LoginToken;\n    this.token = \"iasgosdjaoifgo\";\n\n    this.bloodPressure$ = this.pollIntervalSub$.pipe(\n      switchMap(val => timer(0, val * 1000).pipe(\n        switchMap(() =>\n          this.api.getUserBloodPressure(this.token).pipe(first())\n        ),\n        map(data => data[0].bloodPressure)\n      ))\n    );\n  }\n\n  switchPanel(isRaw: boolean){\n    this.isRawDisplay = isRaw;\n  }\n\n  generateRawRange():number[]{\n    let result = [];\n    let start = 80;\n    while(start <= 200){\n      result.push(start);\n      start += 10;\n    }\n    return result;\n  }\n\n  generateLogarithmicRange():number[]{\n    let result = [];\n    let start = 4.0;\n    while(start <= 5.4){\n      result.push(start);\n      start += 0.2;\n      start = parseFloat(start.toFixed(1));\n    }\n    return result;\n  }\n\n  calRawBucketValues(data: number[]): number[]{\n    let result = new Array(11);\n    result.fill(0)\n    for(let each of data){\n      let index = this.calculateRawInterval(each);\n      result[index] += 1;\n    }\n    return result;\n  }\n\n  calLogBucketValues(data: number[]): number[]{\n    let result = new Array(8);\n    result.fill(0)\n    for(let each of data){\n      let index = this.calculateLogInterval(Math.log(each));\n      result[index] += 1;\n    }\n    return result;\n  }\n\n  calculateRawInterval(num: number){\n    let index = 0;\n    for(let i = 0; i < this.bloodPressureRangeRaw.length - 1;i ++){\n      if(num >= this.bloodPressureRangeRaw[i] && num < this.bloodPressureRangeRaw[i + 1]){\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n\n  calculateLogInterval(num: number){\n    let index = 0;\n    for(let i = 0; i < this.bloodPressureRangeLogarithmic.length - 1;i ++){\n      if(num >= this.bloodPressureRangeLogarithmic[i] && num < this.bloodPressureRangeLogarithmic[i + 1]){\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n\n  pollIntervalChanged(){\n    this.pollIntervalSub$.next(this.pollInterval);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}