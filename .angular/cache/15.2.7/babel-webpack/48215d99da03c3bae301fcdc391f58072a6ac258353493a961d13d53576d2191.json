{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { first } from 'rxjs';\nlet HistogramComponent = class HistogramComponent {\n  constructor(loginService, api) {\n    this.loginService = loginService;\n    this.api = api;\n    this.isRawDisplay = true;\n    this.frequencyNumber = [20, 40, 60, 80, 100].reverse();\n  }\n  ngOnInit() {\n    this.bloodPressureRangeRaw = this.generateRawRange();\n    this.bloodPressureRangeLogarithmic = this.generateLogarithmicRange();\n    this.token = this.loginService.LoginToken;\n    this.bloodPressure$ = this.api.getUserBloodPressure(this.token).pipe(first());\n  }\n  switchPanel(isRaw) {\n    this.isRawDisplay = isRaw;\n  }\n  generateRawRange() {\n    let result = [];\n    let start = 80;\n    while (start <= 180) {\n      result.push(start);\n      start += 10;\n    }\n    return result;\n  }\n  generateLogarithmicRange() {\n    let result = [];\n    let start = 4.0;\n    while (start <= 5.5) {\n      result.push(start);\n      start += 0.5;\n    }\n    return result;\n  }\n  calRawBucketValues(data) {\n    let result = new Array(11);\n    result.fill(0);\n    for (let each of data) {\n      let index = (each - 80) / 10;\n      result[index] += 1;\n    }\n    return result;\n  }\n  calLogBucketValues(data) {\n    let result = new Array(4);\n    result.fill(0);\n    return result;\n  }\n};\nHistogramComponent = __decorate([Component({\n  selector: 'app-hostogram',\n  templateUrl: './histogram.component.html',\n  styleUrls: ['./histogram.component.scss']\n})], HistogramComponent);\nexport { HistogramComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAAqBC,KAAK,QAAQ,MAAM;AAQjC,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAS7BC,YACUC,YAA0B,EAC1BC,GAAsB;IADtB,iBAAY,GAAZD,YAAY;IACZ,QAAG,GAAHC,GAAG;IATb,iBAAY,GAAG,IAAI;IAGnB,oBAAe,GAAG,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,CAAC,CAACC,OAAO,EAAE;EAO1C;EAEHC,QAAQ;IACN,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACC,gBAAgB,EAAE;IACpD,IAAI,CAACC,6BAA6B,GAAG,IAAI,CAACC,wBAAwB,EAAE;IAEpE,IAAI,CAACC,KAAK,GAAG,IAAI,CAACR,YAAY,CAACS,UAAU;IAEzC,IAAI,CAACC,cAAc,GAAG,IAAI,CAACT,GAAG,CAACU,oBAAoB,CAAC,IAAI,CAACH,KAAK,CAAC,CAACI,IAAI,CAACf,KAAK,EAAE,CAAC;EAC/E;EAEAgB,WAAW,CAACC,KAAc;IACxB,IAAI,CAACC,YAAY,GAAGD,KAAK;EAC3B;EAEAT,gBAAgB;IACd,IAAIW,MAAM,GAAG,EAAE;IACf,IAAIC,KAAK,GAAG,EAAE;IACd,OAAMA,KAAK,IAAI,GAAG,EAAC;MACjBD,MAAM,CAACE,IAAI,CAACD,KAAK,CAAC;MAClBA,KAAK,IAAI,EAAE;;IAEb,OAAOD,MAAM;EACf;EAEAT,wBAAwB;IACtB,IAAIS,MAAM,GAAG,EAAE;IACf,IAAIC,KAAK,GAAG,GAAG;IACf,OAAMA,KAAK,IAAI,GAAG,EAAC;MACjBD,MAAM,CAACE,IAAI,CAACD,KAAK,CAAC;MAClBA,KAAK,IAAI,GAAG;;IAEd,OAAOD,MAAM;EACf;EAEAG,kBAAkB,CAACC,IAAc;IAC/B,IAAIJ,MAAM,GAAG,IAAIK,KAAK,CAAC,EAAE,CAAC;IAC1BL,MAAM,CAACM,IAAI,CAAC,CAAC,CAAC;IACd,KAAI,IAAIC,IAAI,IAAIH,IAAI,EAAC;MACnB,IAAII,KAAK,GAAG,CAACD,IAAI,GAAG,EAAE,IAAI,EAAE;MAC5BP,MAAM,CAACQ,KAAK,CAAC,IAAI,CAAC;;IAEpB,OAAOR,MAAM;EACf;EAEAS,kBAAkB,CAACL,IAAc;IAC/B,IAAIJ,MAAM,GAAG,IAAIK,KAAK,CAAC,CAAC,CAAC;IACzBL,MAAM,CAACM,IAAI,CAAC,CAAC,CAAC;IAEd,OAAON,MAAM;EACf;CACD;AA/DYlB,kBAAkB,eAL9BF,SAAS,CAAC;EACT8B,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,4BAA4B;CACzC,CAAC,GACW9B,kBAAkB,CA+D9B;SA/DYA,kBAAkB","names":["Component","first","HistogramComponent","constructor","loginService","api","reverse","ngOnInit","bloodPressureRangeRaw","generateRawRange","bloodPressureRangeLogarithmic","generateLogarithmicRange","token","LoginToken","bloodPressure$","getUserBloodPressure","pipe","switchPanel","isRaw","isRawDisplay","result","start","push","calRawBucketValues","data","Array","fill","each","index","calLogBucketValues","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\practise\\ClinicalDataApp\\my-clinical-data-app\\src\\app\\hostogram\\histogram.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { LoginService } from '../login.service';\nimport { GeneralApiService } from '../general-api.service';\nimport { Observable, first } from 'rxjs';\nimport { UserBloodPressure } from '../model/user-blood-pressure';\n\n@Component({\n  selector: 'app-hostogram',\n  templateUrl: './histogram.component.html',\n  styleUrls: ['./histogram.component.scss'],\n})\nexport class HistogramComponent implements OnInit {\n  token!: string;\n  isRawDisplay = true;\n  bloodPressureRangeRaw!: number[];\n  bloodPressureRangeLogarithmic!: number[];\n  frequencyNumber = [20,40,60,80,100].reverse();\n\n  bloodPressure$!: Observable<UserBloodPressure>;\n\n  constructor(\n    private loginService: LoginService,\n    private api: GeneralApiService\n  ) {}\n\n  ngOnInit(): void {\n    this.bloodPressureRangeRaw = this.generateRawRange();\n    this.bloodPressureRangeLogarithmic = this.generateLogarithmicRange();\n\n    this.token = this.loginService.LoginToken;\n\n    this.bloodPressure$ = this.api.getUserBloodPressure(this.token).pipe(first());\n  }\n\n  switchPanel(isRaw: boolean){\n    this.isRawDisplay = isRaw;\n  }\n\n  generateRawRange():number[]{\n    let result = [];\n    let start = 80;\n    while(start <= 180){\n      result.push(start);\n      start += 10;\n    }\n    return result;\n  }\n\n  generateLogarithmicRange():number[]{\n    let result = [];\n    let start = 4.0;\n    while(start <= 5.5){\n      result.push(start);\n      start += 0.5;\n    }\n    return result;\n  }\n\n  calRawBucketValues(data: number[]): number[]{\n    let result = new Array(11);\n    result.fill(0)\n    for(let each of data){\n      let index = (each - 80) / 10;\n      result[index] += 1;\n    }\n    return result;\n  }\n\n  calLogBucketValues(data: number[]): number[]{\n    let result = new Array(4);\n    result.fill(0)\n\n    return result;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}