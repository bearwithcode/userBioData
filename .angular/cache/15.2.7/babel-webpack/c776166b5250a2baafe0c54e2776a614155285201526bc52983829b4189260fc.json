{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ClinicalDatabaseService {\n  constructor() {\n    this.userData = [{\n      id: 1,\n      email: 'victor@gmail.com',\n      password: '123b',\n      token: 'iasgosdjaoifgo'\n    }, {\n      id: 2,\n      email: 'tove@gmail.com',\n      password: '345a',\n      token: 'fgdfgdfg'\n    }];\n    this.genSub$ = mew;\n  }\n  createDb() {\n    const users = this.userData;\n    let userBloodPressureData = this.generateUserBloodPressure();\n    setInterval(() => {\n      userBloodPressureData = this.generateUserBloodPressure();\n    }, 2000);\n    return {\n      users,\n      userBloodPressureData\n    };\n  }\n  generateUserBloodPressure() {\n    return this.userData.map(each => {\n      let result = {\n        id: null,\n        token: each.token,\n        bloodPressure: []\n      };\n      let randomPressure = [];\n      for (let i = 0; i < 200; i++) {\n        //generate 200 random blood pressure to datebase\n        randomPressure.push(Math.floor(Math.random() * 100) + 80); //from 80 to 180\n      }\n\n      result.bloodPressure = randomPressure;\n      return result;\n    });\n  }\n}\nClinicalDatabaseService.ɵfac = function ClinicalDatabaseService_Factory(t) {\n  return new (t || ClinicalDatabaseService)();\n};\nClinicalDatabaseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ClinicalDatabaseService,\n  factory: ClinicalDatabaseService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AASA,OAAM,MAAOA,uBAAuB;EAHpCC;IAIU,aAAQ,GAAW,CACzB;MACEC,EAAE,EAAE,CAAC;MACLC,KAAK,EAAE,kBAAkB;MACzBC,QAAQ,EAAE,MAAM;MAChBC,KAAK,EAAE;KACR,EACD;MAAEH,EAAE,EAAE,CAAC;MAAEC,KAAK,EAAE,gBAAgB;MAAEC,QAAQ,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAU,CAAE,CACxE;IAEO,YAAO,GAAGC,GAAG;;EAErBC,QAAQ;IACN,MAAMC,KAAK,GAAW,IAAI,CAACC,QAAQ;IACnC,IAAIC,qBAAqB,GACvB,IAAI,CAACC,yBAAyB,EAAE;IAEhCC,WAAW,CAAC,MAAI;MACdF,qBAAqB,GAAG,IAAI,CAACC,yBAAyB,EAAE;IAC1D,CAAC,EAAE,IAAI,CAAC;IAEV,OAAO;MAAEH,KAAK;MAAEE;IAAqB,CAAE;EACzC;EAEAC,yBAAyB;IACvB,OAAO,IAAI,CAACF,QAAQ,CAACI,GAAG,CAAEC,IAAI,IAAI;MAChC,IAAIC,MAAM,GAAsB;QAC9Bb,EAAE,EAAE,IAAI;QACRG,KAAK,EAAES,IAAI,CAACT,KAAK;QACjBW,aAAa,EAAE;OAChB;MACD,IAAIC,cAAc,GAAG,EAAE;MACvB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;QAAC;QAC7BD,cAAc,CAACE,IAAI,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;;;MAE5DP,MAAM,CAACC,aAAa,GAAGC,cAAc;MACrC,OAAOF,MAAM;IACf,CAAC,CAAC;EACJ;;AAvCWf,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAuB,SAAvBvB,uBAAuB;EAAAwB,YAFtB;AAAM","names":["ClinicalDatabaseService","constructor","id","email","password","token","mew","createDb","users","userData","userBloodPressureData","generateUserBloodPressure","setInterval","map","each","result","bloodPressure","randomPressure","i","push","Math","floor","random","factory","providedIn"],"sourceRoot":"","sources":["D:\\practise\\ClinicalDataApp\\my-clinical-data-app\\src\\app\\clinical-database.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nimport { User } from './model/user';\nimport { UserBloodPressure } from './model/user-blood-pressure';\nimport { map, timer } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ClinicalDatabaseService implements InMemoryDbService {\n  private userData: User[] = [\n    {\n      id: 1,\n      email: 'victor@gmail.com',\n      password: '123b',\n      token: 'iasgosdjaoifgo',\n    },\n    { id: 2, email: 'tove@gmail.com', password: '345a', token: 'fgdfgdfg' },\n  ];\n\n  private genSub$ = mew BehaviorSubject<>\n\n  createDb() {\n    const users: User[] = this.userData;\n    let userBloodPressureData: UserBloodPressure[] =\n      this.generateUserBloodPressure();\n\n      setInterval(()=>{\n        userBloodPressureData = this.generateUserBloodPressure();\n      }, 2000)\n\n    return { users, userBloodPressureData };\n  }\n\n  generateUserBloodPressure(): UserBloodPressure[] {\n    return this.userData.map((each) => {\n      let result: UserBloodPressure = {\n        id: null,\n        token: each.token,\n        bloodPressure: [],\n      };\n      let randomPressure = [];\n      for (let i = 0; i < 200; i++) {//generate 200 random blood pressure to datebase\n        randomPressure.push(Math.floor(Math.random() * 100) + 80);//from 80 to 180\n      }\n      result.bloodPressure = randomPressure;\n      return result;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}