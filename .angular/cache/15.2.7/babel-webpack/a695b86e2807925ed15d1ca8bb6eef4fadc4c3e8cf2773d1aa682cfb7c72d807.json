{"ast":null,"code":"import { BehaviorSubject, combineLatest, first, map, switchMap, timer } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../login.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../general-api.service\";\nexport class HistogramComponent {\n  constructor(loginService, router, api) {\n    this.loginService = loginService;\n    this.router = router;\n    this.api = api;\n    this.isRawDisplay = true;\n    this.frequencyNumber = [20, 40, 60, 80, 100].reverse();\n    this.pollInterval = 5;\n    this.minValue = 80;\n    this.maxValue = 180;\n    this.minMaxValueSub$ = new BehaviorSubject([this.minValue, this.maxValue]);\n    this.pollIntervalSub$ = new BehaviorSubject(5);\n  }\n  ngOnInit() {\n    this.bloodPressureRangeRaw = this.generateRawRange();\n    this.bloodPressureRangeLogarithmic = this.generateLogarithmicRange();\n    this.token = this.loginService.LoginToken;\n    this.bloodPressureBaseValues$ = this.pollIntervalSub$.pipe(switchMap(val => timer(0, val * 1000).pipe(switchMap(() => this.api.getUserBloodPressure(this.token).pipe(first())), map(data => data[0].bloodPressure))));\n    this.bloodPressure$ = combineLatest([this.bloodPressureBaseValues$, this.minMaxValueSub$]).pipe(map(([baseBloodPressureValues, minMax]) => baseBloodPressureValues.filter(each => each >= minMax[0] && each <= minMax[1])));\n  }\n  switchPanel(isRaw) {\n    this.isRawDisplay = isRaw;\n  }\n  generateRawRange() {\n    let result = [];\n    let start = 80;\n    while (start <= 200) {\n      result.push(start);\n      start += 10;\n    }\n    return result;\n  }\n  generateLogarithmicRange() {\n    let result = [];\n    let start = 4.0;\n    while (start <= 5.4) {\n      result.push(start);\n      start += 0.2;\n      start = parseFloat(start.toFixed(1));\n    }\n    return result;\n  }\n  calRawBucketValues(data) {\n    let result = new Array(11);\n    result.fill(0);\n    for (let each of data) {\n      let index = this.calculateRawInterval(each);\n      result[index] += 1;\n    }\n    return result;\n  }\n  calLogBucketValues(data) {\n    let result = new Array(8);\n    result.fill(0);\n    for (let each of data) {\n      let index = this.calculateLogInterval(Math.log(each));\n      result[index] += 1;\n    }\n    return result;\n  }\n  calculateRawInterval(num) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRangeRaw.length - 1; i++) {\n      if (num >= this.bloodPressureRangeRaw[i] && num < this.bloodPressureRangeRaw[i + 1]) {\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n  calculateLogInterval(num) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRangeLogarithmic.length - 1; i++) {\n      if (num >= this.bloodPressureRangeLogarithmic[i] && num < this.bloodPressureRangeLogarithmic[i + 1]) {\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n  pollIntervalChanged() {\n    this.pollInterval = Math.abs(this.pollInterval);\n    this.pollIntervalSub$.next(this.pollInterval);\n  }\n  minmaxChanged() {\n    if (this.minValue > this.maxValue) {\n      this.minValue = 80;\n      this.maxValue = 180;\n    }\n    this.minMaxValueSub$.next([this.minValue, this.maxValue]);\n  }\n  logout() {\n    this.loginService.LoginToken = '';\n    this.router.navigateByUrl('');\n  }\n}\nHistogramComponent.ɵfac = function HistogramComponent_Factory(t) {\n  return new (t || HistogramComponent)(i0.ɵɵdirectiveInject(i1.LoginService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.GeneralApiService));\n};\nHistogramComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HistogramComponent,\n  selectors: [[\"app-hostogram\"]],\n  decls: 1,\n  vars: 0,\n  template: function HistogramComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\");\n    }\n  },\n  styles: [\".main-histo[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  margin-left: 14vw;\\n  margin-right: 14vw;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-menu[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  margin-bottom: 5vh;\\n  justify-content: space-between;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-menu[_ngcontent-%COMP%]   .uol-icon[_ngcontent-%COMP%] {\\n  width: 4.5vh;\\n  height: 4.5vh;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-menu[_ngcontent-%COMP%]   .uol-icon[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\n  width: 100%;\\n  height: auto;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-menu[_ngcontent-%COMP%]   .logout-button[_ngcontent-%COMP%] {\\n  display: flex;\\n  align-items: center;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-section[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  height: 30vh;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-section[_ngcontent-%COMP%]   .reminding[_ngcontent-%COMP%] {\\n  font-size: small;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-section[_ngcontent-%COMP%]   .user-profile[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-evenly;\\n  width: 38vw;\\n  padding-top: 10vh;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-section[_ngcontent-%COMP%]   .user-profile[_ngcontent-%COMP%]   .basic-infos[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-section[_ngcontent-%COMP%]   .control-panel[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-evenly;\\n  padding: 2%;\\n  width: 48vw;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-section[_ngcontent-%COMP%]   .control-panel[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  padding: 0;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-section[_ngcontent-%COMP%]   .control-panel[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   label[_ngcontent-%COMP%] {\\n  align-self: center;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-section[_ngcontent-%COMP%]   .control-panel[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   input[_ngcontent-%COMP%] {\\n  width: 20vw;\\n}\\n.main-histo[_ngcontent-%COMP%]   .top-section[_ngcontent-%COMP%]   .control-panel[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\n  align-self: center;\\n}\\n.main-histo[_ngcontent-%COMP%]   .buttom-section[_ngcontent-%COMP%] {\\n  height: 48vh;\\n}\\n.main-histo[_ngcontent-%COMP%]   .buttom-section[_ngcontent-%COMP%]   .diagram-body[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  height: 55vh;\\n}\\n.main-histo[_ngcontent-%COMP%]   .buttom-section[_ngcontent-%COMP%]   .diagram-body[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n  font-weight: 800;\\n}\\n.main-histo[_ngcontent-%COMP%]   .buttom-section[_ngcontent-%COMP%]   .diagram-body[_ngcontent-%COMP%]   div[_ngcontent-%COMP%] {\\n  height: 48vh;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvaG9zdG9ncmFtL2hpc3RvZ3JhbS5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQUE7RUFDQSxzQkFBQTtFQUNBLGlCQUFBO0VBQ0Esa0JBQUE7QUFDRjtBQUNFO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7RUFDQSw4QkFBQTtBQUNKO0FBQ0k7RUFDRSxZQUFBO0VBQ0EsYUFBQTtBQUNOO0FBQ007RUFDRSxXQUFBO0VBQ0EsWUFBQTtBQUNSO0FBR0k7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7QUFETjtBQUtFO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtBQUhKO0FBS0k7RUFDRSxnQkFBQTtBQUhOO0FBTUk7RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSw2QkFBQTtFQUNBLFdBQUE7RUFDQSxpQkFBQTtBQUpOO0FBTU07RUFDRSxhQUFBO0VBQ0Esc0JBQUE7QUFKUjtBQVFJO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsNkJBQUE7RUFDQSxXQUFBO0VBQ0EsV0FBQTtBQU5OO0FBT007RUFDRSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSxVQUFBO0FBTFI7QUFPUTtFQUNFLGtCQUFBO0FBTFY7QUFPUTtFQUNFLFdBQUE7QUFMVjtBQU9RO0VBQ0Usa0JBQUE7QUFMVjtBQVdFO0VBQ0UsWUFBQTtBQVRKO0FBV0k7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtFQUNBLFlBQUE7QUFUTjtBQVdNO0VBQ0UsZ0JBQUE7QUFUUjtBQVlNO0VBQ0UsWUFBQTtBQVZSIiwic291cmNlc0NvbnRlbnQiOlsiLm1haW4taGlzdG97XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIG1hcmdpbi1sZWZ0OiAxNHZ3O1xyXG4gIG1hcmdpbi1yaWdodDogMTR2dztcclxuXHJcbiAgLnRvcC1tZW51e1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA1dmg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcblxyXG4gICAgLnVvbC1pY29ue1xyXG4gICAgICB3aWR0aDogNC41dmg7XHJcbiAgICAgIGhlaWdodDogNC41dmg7XHJcblxyXG4gICAgICBpbWd7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLmxvZ291dC1idXR0b257XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAudG9wLXNlY3Rpb257XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIGhlaWdodDogMzB2aDtcclxuXHJcbiAgICAucmVtaW5kaW5ne1xyXG4gICAgICBmb250LXNpemU6IHNtYWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC51c2VyLXByb2ZpbGV7XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xyXG4gICAgICB3aWR0aDogMzh2dztcclxuICAgICAgcGFkZGluZy10b3A6IDEwdmg7XHJcblxyXG4gICAgICAuYmFzaWMtaW5mb3N7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLmNvbnRyb2wtcGFuZWx7XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xyXG4gICAgICBwYWRkaW5nOiAyJTtcclxuICAgICAgd2lkdGg6IDQ4dnc7XHJcbiAgICAgIGRpdntcclxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICAgICAgcGFkZGluZzogMDtcclxuXHJcbiAgICAgICAgbGFiZWx7XHJcbiAgICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlucHV0e1xyXG4gICAgICAgICAgd2lkdGg6IDIwdnc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkaXZ7XHJcbiAgICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAuYnV0dG9tLXNlY3Rpb257XHJcbiAgICBoZWlnaHQ6IDQ4dmg7XHJcblxyXG4gICAgLmRpYWdyYW0tYm9keXtcclxuICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgIGhlaWdodDogNTV2aDtcclxuXHJcbiAgICAgIGgye1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA4MDA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGRpdntcclxuICAgICAgICBoZWlnaHQ6IDQ4dmg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblxyXG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","combineLatest","first","map","switchMap","timer","HistogramComponent","constructor","loginService","router","api","reverse","minValue","maxValue","ngOnInit","bloodPressureRangeRaw","generateRawRange","bloodPressureRangeLogarithmic","generateLogarithmicRange","token","LoginToken","bloodPressureBaseValues$","pollIntervalSub$","pipe","val","getUserBloodPressure","data","bloodPressure","bloodPressure$","minMaxValueSub$","baseBloodPressureValues","minMax","filter","each","switchPanel","isRaw","isRawDisplay","result","start","push","parseFloat","toFixed","calRawBucketValues","Array","fill","index","calculateRawInterval","calLogBucketValues","calculateLogInterval","Math","log","num","i","length","pollIntervalChanged","pollInterval","abs","next","minmaxChanged","logout","navigateByUrl","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["D:\\practise\\ClinicalDataApp\\my-clinical-data-app\\src\\app\\hostogram\\histogram.component.ts","D:\\practise\\ClinicalDataApp\\my-clinical-data-app\\src\\app\\hostogram\\histogram.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { LoginService } from '../login.service';\nimport { GeneralApiService } from '../general-api.service';\nimport {\n  BehaviorSubject,\n  Observable,\n  Subject,\n  combineLatest,\n  combineLatestWith,\n  first,\n  map,\n  switchMap,\n  timer,\n} from 'rxjs';\nimport { UserBloodPressure } from '../model/user-blood-pressure';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-hostogram',\n  templateUrl: './histogram.component.html',\n  styleUrls: ['./histogram.component.scss'],\n})\nexport class HistogramComponent implements OnInit {\n  token!: string;\n  isRawDisplay = true;\n  bloodPressureRangeRaw!: number[];\n  bloodPressureRangeLogarithmic!: number[];\n  frequencyNumber = [20, 40, 60, 80, 100].reverse();\n  pollInterval = 5;\n  bloodPressure$!: Observable<number[]>;\n  bloodPressureBaseValues$!: Observable<number[]>;\n\n  minValue = 80;\n  maxValue = 180;\n  private minMaxValueSub$ = new BehaviorSubject<number[]>([\n    this.minValue,\n    this.maxValue,\n  ]);\n\n  private pollIntervalSub$ = new BehaviorSubject<number>(5);\n\n  constructor(\n    private loginService: LoginService,\n    private router: Router,\n    private api: GeneralApiService\n  ) {}\n\n  ngOnInit(): void {\n    this.bloodPressureRangeRaw = this.generateRawRange();\n    this.bloodPressureRangeLogarithmic = this.generateLogarithmicRange();\n\n    this.token = this.loginService.LoginToken;\n\n    this.bloodPressureBaseValues$ = this.pollIntervalSub$.pipe(\n      switchMap((val) =>\n        timer(0, val * 1000).pipe(\n          switchMap(() =>\n            this.api.getUserBloodPressure(this.token).pipe(first())\n          ),\n          map((data) => data[0].bloodPressure)\n        )\n      )\n    );\n\n    this.bloodPressure$ = combineLatest([\n      this.bloodPressureBaseValues$,\n      this.minMaxValueSub$,\n    ]).pipe(\n      map(([baseBloodPressureValues, minMax]) =>\n        baseBloodPressureValues.filter(\n          (each) => each >= minMax[0] && each <= minMax[1]\n        )\n      )\n    );\n  }\n\n  switchPanel(isRaw: boolean) {\n    this.isRawDisplay = isRaw;\n  }\n\n  generateRawRange(): number[] {\n    let result = [];\n    let start = 80;\n    while (start <= 200) {\n      result.push(start);\n      start += 10;\n    }\n    return result;\n  }\n\n  generateLogarithmicRange(): number[] {\n    let result = [];\n    let start = 4.0;\n    while (start <= 5.4) {\n      result.push(start);\n      start += 0.2;\n      start = parseFloat(start.toFixed(1));\n    }\n    return result;\n  }\n\n  calRawBucketValues(data: number[]): number[] {\n    let result = new Array(11);\n    result.fill(0);\n    for (let each of data) {\n      let index = this.calculateRawInterval(each);\n      result[index] += 1;\n    }\n    return result;\n  }\n\n  calLogBucketValues(data: number[]): number[] {\n    let result = new Array(8);\n    result.fill(0);\n    for (let each of data) {\n      let index = this.calculateLogInterval(Math.log(each));\n      result[index] += 1;\n    }\n    return result;\n  }\n\n  calculateRawInterval(num: number) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRangeRaw.length - 1; i++) {\n      if (\n        num >= this.bloodPressureRangeRaw[i] &&\n        num < this.bloodPressureRangeRaw[i + 1]\n      ) {\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n\n  calculateLogInterval(num: number) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRangeLogarithmic.length - 1; i++) {\n      if (\n        num >= this.bloodPressureRangeLogarithmic[i] &&\n        num < this.bloodPressureRangeLogarithmic[i + 1]\n      ) {\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n\n  pollIntervalChanged() {\n    this.pollInterval = Math.abs(this.pollInterval);\n    this.pollIntervalSub$.next(this.pollInterval);\n  }\n\n  minmaxChanged() {\n    if (this.minValue > this.maxValue) {\n      this.minValue = 80;\n      this.maxValue = 180;\n    }\n    this.minMaxValueSub$.next([this.minValue, this.maxValue]);\n  }\n\n  logout() {\n    this.loginService.LoginToken = '';\n    this.router.navigateByUrl('');\n  }\n}\n","<div>\n\n</div>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}