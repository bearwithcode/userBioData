{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nlet HistogramDiagramComponent = class HistogramDiagramComponent {\n  constructor() {\n    this.frequency = [];\n  }\n  //frequency = [0,11,34,40,60,20,88,0,7,0,0];\n  caculateBarHeight(num) {\n    return {\n      height: `${this.getFrequency(num) * 0.4}vh`\n    };\n  }\n  getFrequency(num) {\n    let index = this.calculateInterval(num);\n    return this.frequency[index];\n  }\n  calculateInterval(num) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRange.length - 1; i++) {\n      if (num >= this.bloodPressureRange[i] && num < this.bloodPressureRange[i + 1]) {\n        index = i;\n      }\n    }\n    return index;\n  }\n};\n__decorate([Input()], HistogramDiagramComponent.prototype, \"frequencyNumber\", void 0);\n__decorate([Input()], HistogramDiagramComponent.prototype, \"bloodPressureRange\", void 0);\n__decorate([Input()], HistogramDiagramComponent.prototype, \"frequency\", void 0);\n__decorate([Input()], HistogramDiagramComponent.prototype, \"interval\", void 0);\nHistogramDiagramComponent = __decorate([Component({\n  selector: 'app-histogram-diagram',\n  templateUrl: './histogram-diagram.component.html',\n  styleUrls: ['./histogram-diagram.component.scss']\n})], HistogramDiagramComponent);\nexport { HistogramDiagramComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,eAAe;AAOzC,IAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAA/BC;IAGI,cAAS,GAAY,EAAE;EAyBlC;EAvBE;EAEAC,iBAAiB,CAACC,GAAU;IAC1B,OAAO;MACLC,MAAM,EAAE,GAAG,IAAI,CAACC,YAAY,CAACF,GAAG,CAAC,GAAG,GAAG;KACxC;EACH;EAEAE,YAAY,CAACF,GAAW;IACtB,IAAIG,KAAK,GAAG,IAAI,CAACC,iBAAiB,CAACJ,GAAG,CAAC;IAEvC,OAAO,IAAI,CAACK,SAAS,CAACF,KAAK,CAAC;EAC9B;EAEAC,iBAAiB,CAACJ,GAAW;IAC3B,IAAIG,KAAK,GAAG,CAAC;IACb,KAAI,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACC,kBAAkB,CAACC,MAAM,GAAG,CAAC,EAACF,CAAC,EAAG,EAAC;MACzD,IAAGN,GAAG,IAAI,IAAI,CAACO,kBAAkB,CAACD,CAAC,CAAC,IAAIN,GAAG,GAAG,IAAI,CAACO,kBAAkB,CAACD,CAAC,GAAG,CAAC,CAAC,EAAC;QAC3EH,KAAK,GAAGG,CAAC;;;IAGb,OAAOH,KAAK;EACd;CACD;AA3BUM,YAARb,KAAK,EAAE,kEAA4B;AAC3Ba,YAARb,KAAK,EAAE,qEAA+B;AAC9Ba,YAARb,KAAK,EAAE,4DAAyB;AACxBa,YAARb,KAAK,EAAE,2DAAmB;AAJhBC,yBAAyB,eALrCF,SAAS,CAAC;EACTe,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,GACWf,yBAAyB,CA4BrC;SA5BYA,yBAAyB","names":["Component","Input","HistogramDiagramComponent","constructor","caculateBarHeight","num","height","getFrequency","index","calculateInterval","frequency","i","bloodPressureRange","length","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\practise\\ClinicalDataApp\\my-clinical-data-app\\src\\app\\histogram-diagram\\histogram-diagram.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-histogram-diagram',\n  templateUrl: './histogram-diagram.component.html',\n  styleUrls: ['./histogram-diagram.component.scss']\n})\nexport class HistogramDiagramComponent {\n  @Input() frequencyNumber!: number[];\n  @Input() bloodPressureRange!: number[];\n  @Input() frequency:number[] = [];\n  @Input() interval!: number;\n  //frequency = [0,11,34,40,60,20,88,0,7,0,0];\n\n  caculateBarHeight(num:number){\n    return {\n      height: `${this.getFrequency(num) * 0.4}vh`\n    }\n  }\n\n  getFrequency(num: number){\n    let index = this.calculateInterval(num);\n\n    return this.frequency[index]\n  }\n\n  calculateInterval(num: number){\n    let index = 0;\n    for(let i = 0; i < this.bloodPressureRange.length - 1;i ++){\n      if(num >= this.bloodPressureRange[i] && num < this.bloodPressureRange[i + 1]){\n        index = i;\n      }\n    }\n    return index;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}