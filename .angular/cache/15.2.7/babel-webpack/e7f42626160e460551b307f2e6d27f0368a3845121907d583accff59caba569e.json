{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { BehaviorSubject, combineLatest, first, map, switchMap, timer } from 'rxjs';\nlet HistogramComponent = class HistogramComponent {\n  constructor(loginService, router, api) {\n    this.loginService = loginService;\n    this.router = router;\n    this.api = api;\n    this.isRawDisplay = true;\n    this.frequencyNumber = [20, 40, 60, 80, 100].reverse();\n    this.pollInterval = 5;\n    this.minValue = 80;\n    this.maxValue = 180;\n    this.minMaxValueSub$ = new BehaviorSubject([this.minValue, this.maxValue]);\n    this.pollIntervalSub$ = new BehaviorSubject(5);\n  }\n  ngOnInit() {\n    this.bloodPressureRangeRaw = this.generateRawRange();\n    this.bloodPressureRangeLogarithmic = this.generateLogarithmicRange();\n    this.token = this.loginService.LoginToken;\n    this.bloodPressureBaseValues$ = this.pollIntervalSub$.pipe(switchMap(val => timer(0, val * 1000).pipe(switchMap(() => this.api.getUserBloodPressure(this.token).pipe(first())), map(data => data[0].bloodPressure))));\n    this.bloodPressure$ = combineLatest([this.bloodPressureBaseValues$, this.minMaxValueSub$]).pipe(map(([baseBloodPressureValues, minMax]) => baseBloodPressureValues.filter(each => each >= minMax[0] && each <= minMax[1])));\n  }\n  switchPanel(isRaw) {\n    this.isRawDisplay = isRaw;\n  }\n  generateRawRange() {\n    let result = [];\n    let start = 80;\n    while (start <= 200) {\n      result.push(start);\n      start += 10;\n    }\n    return result;\n  }\n  generateLogarithmicRange() {\n    let result = [];\n    let start = 4.0;\n    while (start <= 5.4) {\n      result.push(start);\n      start += 0.2;\n      start = parseFloat(start.toFixed(1));\n    }\n    return result;\n  }\n  calRawBucketValues(data) {\n    let result = new Array(11);\n    result.fill(0);\n    for (let each of data) {\n      let index = this.calculateRawInterval(each);\n      result[index] += 1;\n    }\n    return result;\n  }\n  calLogBucketValues(data) {\n    let result = new Array(8);\n    result.fill(0);\n    for (let each of data) {\n      let index = this.calculateLogInterval(Math.log(each));\n      result[index] += 1;\n    }\n    return result;\n  }\n  calculateRawInterval(num) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRangeRaw.length - 1; i++) {\n      if (num >= this.bloodPressureRangeRaw[i] && num < this.bloodPressureRangeRaw[i + 1]) {\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n  calculateLogInterval(num) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRangeLogarithmic.length - 1; i++) {\n      if (num >= this.bloodPressureRangeLogarithmic[i] && num < this.bloodPressureRangeLogarithmic[i + 1]) {\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n  pollIntervalChanged() {\n    this.pollIntervalSub$.next(this.pollInterval);\n  }\n  minmaxChanged() {\n    if (this.minValue <= this.maxValue) {\n      this.minMaxValueSub$.next([this.minValue, this.maxValue]);\n    } else {\n      this.minValue = 80;\n      this.maxValue = 180;\n    }\n  }\n  logout() {\n    this.loginService.LoginToken = \"\";\n    this.rout;\n  }\n};\nHistogramComponent = __decorate([Component({\n  selector: 'app-hostogram',\n  templateUrl: './histogram.component.html',\n  styleUrls: ['./histogram.component.scss']\n})], HistogramComponent);\nexport { HistogramComponent };","map":{"version":3,"mappings":"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","names":["Component","BehaviorSubject","combineLatest","first","map","switchMap","timer","HistogramComponent","constructor","loginService","router","api","reverse","minValue","maxValue","ngOnInit","bloodPressureRangeRaw","generateRawRange","bloodPressureRangeLogarithmic","generateLogarithmicRange","token","LoginToken","bloodPressureBaseValues$","pollIntervalSub$","pipe","val","getUserBloodPressure","data","bloodPressure","bloodPressure$","minMaxValueSub$","baseBloodPressureValues","minMax","filter","each","switchPanel","isRaw","isRawDisplay","result","start","push","parseFloat","toFixed","calRawBucketValues","Array","fill","index","calculateRawInterval","calLogBucketValues","calculateLogInterval","Math","log","num","i","length","pollIntervalChanged","next","pollInterval","minmaxChanged","logout","rout","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\practise\\ClinicalDataApp\\my-clinical-data-app\\src\\app\\hostogram\\histogram.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { LoginService } from '../login.service';\nimport { GeneralApiService } from '../general-api.service';\nimport {\n  BehaviorSubject,\n  Observable,\n  Subject,\n  combineLatest,\n  combineLatestWith,\n  first,\n  map,\n  switchMap,\n  timer,\n} from 'rxjs';\nimport { UserBloodPressure } from '../model/user-blood-pressure';\n\n@Component({\n  selector: 'app-hostogram',\n  templateUrl: './histogram.component.html',\n  styleUrls: ['./histogram.component.scss'],\n})\nexport class HistogramComponent implements OnInit {\n  token!: string;\n  isRawDisplay = true;\n  bloodPressureRangeRaw!: number[];\n  bloodPressureRangeLogarithmic!: number[];\n  frequencyNumber = [20, 40, 60, 80, 100].reverse();\n  pollInterval = 5;\n  bloodPressure$!: Observable<number[]>;\n  bloodPressureBaseValues$!: Observable<number[]>;\n\n  minValue = 80;\n  maxValue = 180;\n  private minMaxValueSub$ = new BehaviorSubject<number[]>([\n    this.minValue,\n    this.maxValue,\n  ]);\n\n  private pollIntervalSub$ = new BehaviorSubject<number>(5);\n\n  constructor(\n    private loginService: LoginService,\n    private router: Router,\n    private api: GeneralApiService\n  ) {}\n\n  ngOnInit(): void {\n    this.bloodPressureRangeRaw = this.generateRawRange();\n    this.bloodPressureRangeLogarithmic = this.generateLogarithmicRange();\n\n    this.token = this.loginService.LoginToken;\n\n    this.bloodPressureBaseValues$ = this.pollIntervalSub$.pipe(\n      switchMap((val) =>\n        timer(0, val * 1000).pipe(\n          switchMap(() =>\n            this.api.getUserBloodPressure(this.token).pipe(first())\n          ),\n          map((data) => data[0].bloodPressure)\n        )\n      )\n    );\n\n    this.bloodPressure$ = combineLatest([\n      this.bloodPressureBaseValues$,\n      this.minMaxValueSub$,\n    ]).pipe(\n      map(([baseBloodPressureValues, minMax]) =>\n        baseBloodPressureValues.filter(\n          (each) => each >= minMax[0] && each <= minMax[1]\n        )\n      )\n    );\n  }\n\n  switchPanel(isRaw: boolean) {\n    this.isRawDisplay = isRaw;\n  }\n\n  generateRawRange(): number[] {\n    let result = [];\n    let start = 80;\n    while (start <= 200) {\n      result.push(start);\n      start += 10;\n    }\n    return result;\n  }\n\n  generateLogarithmicRange(): number[] {\n    let result = [];\n    let start = 4.0;\n    while (start <= 5.4) {\n      result.push(start);\n      start += 0.2;\n      start = parseFloat(start.toFixed(1));\n    }\n    return result;\n  }\n\n  calRawBucketValues(data: number[]): number[] {\n    let result = new Array(11);\n    result.fill(0);\n    for (let each of data) {\n      let index = this.calculateRawInterval(each);\n      result[index] += 1;\n    }\n    return result;\n  }\n\n  calLogBucketValues(data: number[]): number[] {\n    let result = new Array(8);\n    result.fill(0);\n    for (let each of data) {\n      let index = this.calculateLogInterval(Math.log(each));\n      result[index] += 1;\n    }\n    return result;\n  }\n\n  calculateRawInterval(num: number) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRangeRaw.length - 1; i++) {\n      if (\n        num >= this.bloodPressureRangeRaw[i] &&\n        num < this.bloodPressureRangeRaw[i + 1]\n      ) {\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n\n  calculateLogInterval(num: number) {\n    let index = 0;\n    for (let i = 0; i < this.bloodPressureRangeLogarithmic.length - 1; i++) {\n      if (\n        num >= this.bloodPressureRangeLogarithmic[i] &&\n        num < this.bloodPressureRangeLogarithmic[i + 1]\n      ) {\n        index = i + 1;\n      }\n    }\n    return index;\n  }\n\n  pollIntervalChanged() {\n    this.pollIntervalSub$.next(this.pollInterval);\n  }\n\n  minmaxChanged() {\n    if (this.minValue <= this.maxValue) {\n      this.minMaxValueSub$.next([this.minValue, this.maxValue]);\n    } else {\n      this.minValue = 80;\n      this.maxValue = 180;\n    }\n  }\n\n  logout(){\n    this.loginService.LoginToken = \"\";\n    this.rout\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}