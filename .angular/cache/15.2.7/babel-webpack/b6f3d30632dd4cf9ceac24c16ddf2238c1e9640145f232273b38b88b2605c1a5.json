{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs';\nlet LoginComponent = class LoginComponent {\n  constructor(formBuilder, router, api, loginService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.api = api;\n    this.loginService = loginService;\n    this.isSubmitted = false;\n    this.accountNotFound = false;\n  }\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\")]],\n      password: ['', Validators.required]\n    });\n  }\n  get formEmail() {\n    return this.form.controls['email'];\n  }\n  get formPassword() {\n    return this.form.controls['password'];\n  }\n  onSubmit() {\n    this.isSubmitted = true;\n    if (this.form.invalid) {\n      return;\n    }\n    let user = {\n      id: null,\n      email: this.formEmail.value,\n      password: this.formPassword.value\n    };\n    this.api.login(user).pipe(first()).subscribe({\n      next: data => {\n        if (data.length === 0) {\n          this.accountNotFound = true;\n        } else {\n          this.accountNotFound = false;\n          let token = data[0].token || \"\";\n          this.loginService.LoginToken = token;\n          this.router.navigateByUrl('hostogram');\n        }\n      },\n      error: error => {},\n      complete: () => {}\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAA2B,eAAe;AAE5D,SAAiCC,UAAU,QAAQ,gBAAgB;AAGnE,SAASC,KAAK,QAAQ,MAAM;AAQrB,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAKzBC,YACUC,WAAwB,EACxBC,MAAc,EACdC,GAAsB,EACtBC,YAA0B;IAH1B,gBAAW,GAAXH,WAAW;IACX,WAAM,GAANC,MAAM;IACN,QAAG,GAAHC,GAAG;IACH,iBAAY,GAAZC,YAAY;IAPtB,gBAAW,GAAG,KAAK;IACnB,oBAAe,GAAG,KAAK;EAOpB;EAEHC,QAAQ;IACN,IAAI,CAACC,IAAI,GAAG,IAAI,CAACL,WAAW,CAACM,KAAK,CAAC;MACjCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACa,OAAO,CAAC,0CAA0C,CAAC,CAAC,CAAC;MAClGC,QAAQ,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACY,QAAQ;KACnC,CAAC;EACJ;EAEA,IAAIG,SAAS;IACX,OAAO,IAAI,CAACN,IAAI,CAACO,QAAQ,CAAC,OAAO,CAAC;EACpC;EAEA,IAAIC,YAAY;IACd,OAAO,IAAI,CAACR,IAAI,CAACO,QAAQ,CAAC,UAAU,CAAC;EACvC;EAEAE,QAAQ;IACN,IAAI,CAACC,WAAW,GAAG,IAAI;IAEvB,IAAG,IAAI,CAACV,IAAI,CAACW,OAAO,EAAC;MACnB;;IAGF,IAAIC,IAAI,GAAQ;MACdC,EAAE,EAAE,IAAI;MACRX,KAAK,EAAE,IAAI,CAACI,SAAS,CAACQ,KAAK;MAC3BT,QAAQ,EAAE,IAAI,CAACG,YAAY,CAACM;KAC7B;IAED,IAAI,CAACjB,GAAG,CAACkB,KAAK,CAACH,IAAI,CAAC,CACnBI,IAAI,CAACxB,KAAK,EAAE,CAAC,CACbyB,SAAS,CAAC;MACTC,IAAI,EAAEC,IAAI,IAAG;QACX,IAAGA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAC;UACnB,IAAI,CAACC,eAAe,GAAG,IAAI;SAC5B,MACG;UACF,IAAI,CAACA,eAAe,GAAG,KAAK;UAC5B,IAAIC,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACG,KAAK,IAAI,EAAE;UAC/B,IAAI,CAACxB,YAAY,CAACyB,UAAU,GAAGD,KAAK;UACpC,IAAI,CAAC1B,MAAM,CAAC4B,aAAa,CAAC,WAAW,CAAC;;MAG1C,CAAC;MACDC,KAAK,EAAEA,KAAK,IAAG,CAAE,CAAC;MAClBC,QAAQ,EAAE,MAAK,CAAE;KACpB,CAAC;EACF;CACD;AA3DYjC,cAAc,eAL1BH,SAAS,CAAC;EACTqC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,GACWpC,cAAc,CA2D1B;SA3DYA,cAAc","names":["Component","Validators","first","LoginComponent","constructor","formBuilder","router","api","loginService","ngOnInit","form","group","email","required","pattern","password","formEmail","controls","formPassword","onSubmit","isSubmitted","invalid","user","id","value","login","pipe","subscribe","next","data","length","accountNotFound","token","LoginToken","navigateByUrl","error","complete","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\practise\\ClinicalDataApp\\my-clinical-data-app\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { GeneralApiService } from '../general-api.service';\nimport { User } from '../model/user';\nimport { first } from 'rxjs';\nimport { LoginService } from '../login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent implements OnInit {\n  form!: FormGroup;\n  isSubmitted = false;\n  accountNotFound = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private api: GeneralApiService,\n    private loginService: LoginService\n  ) {}\n\n  ngOnInit() {\n    this.form = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\")]],\n      password: ['', Validators.required],\n    });\n  }\n\n  get formEmail() {\n    return this.form.controls['email'];\n  }\n\n  get formPassword() {\n    return this.form.controls['password'];\n  }\n\n  onSubmit() {\n    this.isSubmitted = true;\n\n    if(this.form.invalid){\n      return;\n    }\n\n    let user:User = {\n      id: null,\n      email: this.formEmail.value,\n      password: this.formPassword.value\n    }\n\n    this.api.login(user)\n    .pipe(first())\n    .subscribe({\n      next: data => {\n        if(data.length === 0){\n          this.accountNotFound = true;\n        }\n        else{\n          this.accountNotFound = false;\n          let token = data[0].token || \"\";\n          this.loginService.LoginToken = token;\n          this.router.navigateByUrl('hostogram');\n        }\n\n      },\n      error: error => {},\n      complete: () => {}\n  })\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}