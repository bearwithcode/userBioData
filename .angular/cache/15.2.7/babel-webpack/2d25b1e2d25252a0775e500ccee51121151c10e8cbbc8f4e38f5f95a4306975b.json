{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, map, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GeneralApiService {\n  constructor(http) {\n    this.http = http;\n    this.userUrl = 'api/users';\n    this.bloodPressureUrl = 'api/userBloodPressureData';\n  }\n  login(user) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    //due to the limitation of mock api call, in real life I would not return all the users, but here I will filter out the correct user\n    //in real life I will post the user email and password to backend, but please understand this is just a mock api call\n    return this.http.get(this.userUrl, {\n      hea\n    }).pipe(map(data => data.filter(each => each.email === user.email && each.password === user.password)), tap(data => console.log(JSON.stringify(data))), catchError(this.handleError));\n  }\n  getUserBloodPressure(token) {\n    return this.http.get(this.bloodPressureUrl);\n  }\n  handleError(err) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n}\nGeneralApiService.ɵfac = function GeneralApiService_Factory(t) {\n  return new (t || GeneralApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nGeneralApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GeneralApiService,\n  factory: GeneralApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAAqBC,UAAU,EAASC,GAAG,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;;AAK1E,OAAM,MAAOC,iBAAiB;EAM5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,YAAO,GAAG,WAAW;IACrB,qBAAgB,GAAG,2BAA2B;EAGd;EAExCC,KAAK,CAACC,IAAU;IACd,MAAMC,OAAO,GAAG,IAAIV,WAAW,CAAC;MAAE,cAAc,EAAE;IAAkB,CAAE,CAAC;IAEvE;IACA;IACA,OAAO,IAAI,CAACO,IAAI,CAACI,GAAG,CAAS,IAAI,CAACC,OAAO,EAAE;MAACC;IAAG,CAAC,CAAC,CAChDC,IAAI,CACHZ,GAAG,CAACa,IAAI,IAAIA,IAAI,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,KAAKT,IAAI,CAACS,KAAK,IAAID,IAAI,CAACE,QAAQ,KAAKV,IAAI,CAACU,QAAQ,CAAC,CAAC,EAC9FhB,GAAG,CAACY,IAAI,IAAIK,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC,CAAC,CAAC,EAC9Cd,UAAU,CAAC,IAAI,CAACuB,WAAW,CAAC,CAC7B;EACH;EAEAC,oBAAoB,CAACC,KAAa;IAChC,OAAO,IAAI,CAACnB,IAAI,CAACI,GAAG,CAAW,IAAI,CAACgB,gBAAgB,CAAC;EACvD;EAEQH,WAAW,CAACI,GAAQ;IAC1B;IACA;IACA,IAAIC,YAAoB;IACxB,IAAID,GAAG,CAACE,KAAK,YAAYC,UAAU,EAAE;MACnC;MACAF,YAAY,GAAG,sBAAsBD,GAAG,CAACE,KAAK,CAACE,OAAO,EAAE;KACzD,MAAM;MACL;MACA;MACAH,YAAY,GAAG,yBAAyBD,GAAG,CAACK,MAAM,KAAKL,GAAG,CAACM,IAAI,CAACJ,KAAK,EAAE;;IAEzEV,OAAO,CAACU,KAAK,CAACF,GAAG,CAAC;IAClB,OAAOxB,UAAU,CAACyB,YAAY,CAAC;EACjC;;AAvCWxB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAA8B,SAAjB9B,iBAAiB;EAAA+B,YAFhB;AAAM","names":["HttpHeaders","catchError","map","tap","throwError","GeneralApiService","constructor","http","login","user","headers","get","userUrl","hea","pipe","data","filter","each","email","password","console","log","JSON","stringify","handleError","getUserBloodPressure","token","bloodPressureUrl","err","errorMessage","error","ErrorEvent","message","status","body","factory","providedIn"],"sourceRoot":"","sources":["D:\\practise\\ClinicalDataApp\\my-clinical-data-app\\src\\app\\general-api.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { User } from './model/user';\nimport { Observable, catchError, first, map, tap, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeneralApiService {\n\n  private userUrl = 'api/users';\n  private bloodPressureUrl = 'api/userBloodPressureData';\n\n\n  constructor(private http: HttpClient) { }\n\n  login(user: User) : Observable<User[]> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n\n    //due to the limitation of mock api call, in real life I would not return all the users, but here I will filter out the correct user\n    //in real life I will post the user email and password to backend, but please understand this is just a mock api call\n    return this.http.get<User[]>(this.userUrl, {hea})\n    .pipe(\n      map(data => data.filter(each => each.email === user.email && each.password === user.password)),\n      tap(data => console.log(JSON.stringify(data))),\n      catchError(this.handleError)\n    );\n  }\n\n  getUserBloodPressure(token: string): Observable<number[]> {\n    return this.http.get<number[]>(this.bloodPressureUrl)\n  }\n\n  private handleError(err: any) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage: string;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}